generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            String    @id @default(cuid())
  name          String
  password      String?
  email         String    @unique
  emailVerified DateTime?
  role          String?   @default("user")
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email], type: Hash)
  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}

model Store {
  storeId            Int        @id @default(autoincrement())
  name               String     @unique
  title              String?
  logo_url           String?
  ref_link           String
  description        String?
  moreAbout          String?
  hint               String?
  isFeatured         Boolean    @default(false)
  addToPopularStores Boolean    @default(false)
  faq                Json?
  total_ratings      Int        @default(0)
  ratings_count      Int        @default(0)
  best_offer         String     @default("0")
  average_discount   String     @default("0")
  offers             Int        @default(0)
  coupons            Coupon[]
  categories         Category[] @relation("StoreCategories")
  similarStores      Store[]    @relation("SimilarStores")
  storeIsSimilarTo   Store[]    @relation("SimilarStores")
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @default(now()) @updatedAt

  @@map("stores")
}

model Category {
  categoryId          Int        @id @default(autoincrement())
  logo_url            String?
  name                String     @unique
  description         String?
  coupons             Coupon[]
  stores              Store[]    @relation("StoreCategories")
  similarCategories   Category[] @relation("SimilarCategories")
  categoryIsSimilarTo Category[] @relation("SimilarCategories")
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @default(now()) @updatedAt

  @@map("categories")
}

model Coupon {
  couponId          Int      @id @default(autoincrement())
  title             String
  description       String?
  coupon_code       String?
  thumbnail_url     String?
  flipperImage_url  String?
  carouselPosterUrl String?
  type              Type
  addToHomePage     Boolean  @default(false)
  addToCarousel     Boolean  @default(false)
  addToFlipper      Boolean  @default(false)
  store_id          Int
  category_id       Int
  ref_link          String
  due_date          DateTime
  user_count        Int      @default(0)
  createdAt         DateTime @default(now())
  isVerified        Boolean  @default(false)
  updatedAt         DateTime @default(now()) @updatedAt
  store             Store    @relation(fields: [store_id], references: [storeId])
  category          Category @relation(fields: [category_id], references: [categoryId])

  @@map("coupons")
}

enum Type {
  Coupon
  Deal
}
